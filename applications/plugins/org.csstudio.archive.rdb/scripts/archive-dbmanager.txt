#!/bin/bash

#*******************************************************************************
# * Copyright (c) 2010-2013 ITER Organization.
# * All rights reserved. This program and the accompanying materials
# * are made available under the terms of the Eclipse Public License v1.0
# * which accompanies this distribution, and is available at
# * http://www.eclipse.org/legal/epl-v10.html
# ******************************************************************************/

#set -xv

optspec=":hvsc-:"

# configuration parameters

# load file configuration
. ${PWD}/plugin_customization.ini
# day date
DATE=`date +%y_%m_%d_%k_%M`

FILE=""
VERBOSE=""
EXEC=""
COMMAND=""

#color
COLOR_NORMAL='\e[0;30m'
COLOR_GREEN='\e[0;32m'
COLOR_RED='\e[0;31m'
COLOR_BLACK='\e[1;30m'

# help commamd
showusage() {
    	echo "Archive dbmanager manage a PostgreSQL database."
	echo "	- Export database into an archive";
	echo "	- Import database from an archive";

        echo "Usage:"
 	echo "	archive-dbmanager.sh {save|restore|clean} [...]";
	echo "Options: ";
	echo "	-h, --help                    : show Help";
	echo "	-s, --save=<file>		      : save (export) databe in the specific file (.backup) in argument";
	echo "	-r, --restore=<file>	      : restore (import) a PostgreSQL database from an archive created by save";
	echo "	-c, --clean=<file>		      : clean (drop) database objects before recreating";

	echo " ";
	echo "	-v                            : verbose";	
        echo " ";
}

# save / export database
save() {
	if [ -z "$FILE" ]; 
	then
		FILE=$BACKUP"/dump_["$DATABASE"]_"$DATE"_data.backup";
 	fi

    	/usr/bin/pg_dump --host=$HOST --username="$USERNAME" --role="archive" --format=custom --blobs --section=data $VERBOSE --file="$FILE" $DATABASE
	if [ $? -ne 0 ]
	then 
		echo -e ${COLOR_BLACK}"backup             \t\t "${COLOR_RED}"[failed]"${COLOR_NORMAL}
	else
		echo -e ${COLOR_BLACK}"backup in $FILE    \t\t "${COLOR_GREEN}"[succeeded]"${COLOR_NORMAL}
	fi
	reset
}


# restore / import database
restore() {
    	/usr/bin/pg_restore --host $HOST --username "$USERNAME" --dbname "$DATABASE" --role "archive" $VERBOSE "$FILE"
	
	if [ $? -ne 0 ]
	then 
		echo -e "${COLOR_BLACK}restore from $FILE \t\t ${COLOR_RED}[failed]${COLOR_NORMAL}"
	else
		echo -e "${COLOR_BLACK}restore from $FILE \t\t ${COLOR_GREEN}[succeeded]${COLOR_NORMAL}"
	fi
	reset
}
 

drop() {
	echo "Do you want to backup before drop tables (y/n)?"
	read response
	if [ ! $response = "n" ] 
	then 
		save
	fi
	#DATABASE="css_archive_3_0_0"
	USERNAME="archive"
	PGDB="-d $DATABASE -U $USERNAME"
	# TABLES=`psql $PGDB -t --command "SELECT string_agg(table_name, ',') FROM information_schema.tables WHERE table_schema='public'"`
	
	psql $PGDB --command "TRUNCATE TABLE sample,smpl_eng,array_val,chan_grp,channel,retent"

	if [ $? -ne 0 ]
	then 
		echo -e "${COLOR_BLACK}clean up           \t\t ${COLOR_RED}[failed]${COLOR_NORMAL}"
	else
		echo -e "${COLOR_BLACK}clean up           \t\t ${COLOR_GREEN}[succeeded]${COLOR_NORMAL}"
	fi
	reset
}


# inject data
inject() {
	if [ -z "$FILE" ]; 
	then
		FILE=$BACKUP"/dump_$DATABASE_$DATE_data.backup";
 	fi
	echo "FILE" $FILE
    	/usr/bin/pg_dump --host=$HOST --username="$USERNAME" --role="archive" --format=custom --blobs --section=data $VERBOSE --file="$FILE" -D $DATABASE
	if [ $? -ne 0 ]
	then 
		echo -e ${COLOR_BLACK}"inject             \t\t "${COLOR_RED}"[failed]"${COLOR_NORMAL}
	else
		echo -e ${COLOR_BLACK}"inject		  \t\t "${COLOR_GREEN}"[succeeded]"${COLOR_NORMAL}
	fi
	reset
}


# reinitialize
reset() {
	COMMAND=""
}


loadrestorefile() {
	for i in `ls /tmp/ | grep backup`
	do
		echo "/tmp"$1/$i
	done
	echo ""
	echo -e ${COLOR_BLACK}"Choose default file : "${COLOR_NORMAL}
	echo ""
	read FILE
}



while getopts "$optspec" opt; do
  case $opt in
   -)
           case "${OPTARG}" in
		help)
		    showusage
		    ;;
		save=* | export=*)
		    echo "########################"
		    echo "# Create a backup file #"
		    echo "########################"
		    # save=<file_path>
                    val=${OPTARG#*=}
                    opt=${OPTARG%=$val}
		    FILE=${val};
		    save
                    ;;
		restore | import)
		    echo "############################################"
		    echo "# Choose backup file and then restore data #"
		    echo "############################################"
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
		    if [ -z "${val}" ]
		    then
			loadrestorefile
	            fi

    		    if [ -z "${FILE}" ]
		    then
			exit 1
	            fi

		    restore
		    ;;
		restore=* | import=*)
		    echo "########################"
		    echo "# Create a backup file #"
		    echo "########################"
                    val=${OPTARG#*=}
                    opt=${OPTARG%=$val}
		    FILE=${val};
		    restore
                    ;;
		clean)
		    echo "##################"
		    echo "# Clean database #"
		    echo "##################"
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
	            drop
		    ;;
		verbose)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    echo "Parsing option: '--${OPTARG}', value: '${val}'" >&2;
		VERBOSE="--verbose"
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "Unknown option --${OPTARG}" >&2
                    fi
                    ;;
            esac;;
    v)
      VERBOSE="--verbose"
     ;;
    h)
      showusage
      exit 1
      ;;
    s)
      echo "########################"
      echo "# Create a backup file #"
      echo "########################"
      save
      exit 1
      ;;
    c)
      echo "##################"
      echo "# Clean database #"
      echo "##################"
      drop
      exit 1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      showusage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done




